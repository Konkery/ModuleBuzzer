class ClassBuzzer extends ClassActuator{constructor(_opts,_actuatorProps){if(this.name="ClassBuzzer",ClassActuator.apply(this,[_opts,_actuatorProps]),this._MinFreq=_opts.minFreq,this._MaxFreq=_opts.maxFreq,"number"!=typeof this._MaxFreq||"number"!=typeof this._MinFreq)throw new Error("Invalid range values");this.InitTasks()}static get ERROR_CODE_ARG_VALUE(){return 10}static get ERROR_MSG_ARG_VALUE(){return`ERROR>> invalid data. ClassID: ${this.name}`}InitTasks(){this._Channels[0].AddTask("PlaySound",opts=>{["freq","numRep","pulseDur","prop"].forEach(property=>{if("number"!=typeof opts[property]||opts[property]<0)throw new Error("Invalid args")}),opts.prop=E.clip(opts.prop,0,1),opts.pulseDur=E.clip(opts.pulseDur,0,2147483647);const freq=opts.freq;let Thi=opts.pulseDur,Tlo=Math.floor(opts.pulseDur*(1-opts.prop)/opts.prop);count=2*opts.numRep;let beep_flag=!0,beep_func=()=>{--count,count>0?(beep_flag?(this.Off(),this._Interval=setTimeout(beep_func,Tlo)):(this.On(freq),this._Interval=setTimeout(beep_func,Thi)),beep_flag=!beep_flag):this.ResolveTask(0)};this.On(freq),this._Interval=setTimeout(beep_func,Thi)}),this._Channels[0].AddTask("BeepOnce",(function(freq,dur){if(!Number.isInteger(dur)||dur<0)throw new Error("Invalid args");this.On(freq),setTimeout(()=>{this.Off(),this.ResolveTask(0)},dur)})),this._Channels[0].AddTask("BeepTwice",(freq,dur)=>{if(!Number.isInteger(dur)||dur<0)throw new Error("Invalid args");this.On(freq),setTimeout(()=>{this.Off()},dur),setTimeout(()=>{this.On(freq)},2*dur),setTimeout(()=>{this.Off(),setTimeout(()=>{this.ResolveTask(0)},4*dur)},3*dur)})}On(_chNum,_val){if("number"!=typeof _val)throw new Error;_val=E.clip(_val,0,1);const proportion=(x,in_min,in_max,out_min,out_max)=>(x-in_min)*(out_max-out_min)/(in_max-in_min)+out_min;this._IsChOn[_chNum]&&this.Off();let freq=proportion(_val,0,1,this._MinFreq,this._MaxFreq);analogWrite(this._Pins[0],.5,{freq:freq})}Off(){digitalWrite(this._Pins[0],1),this._IsChOn[0]=!1}}exports=ClassBuzzer;